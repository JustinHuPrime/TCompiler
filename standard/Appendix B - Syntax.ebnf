file = module_name, { import }, { definition | declaration } ;

module_name = "module", ( identifier | scoped_identifier ), ";" ;
import = "import", ( identifier | scoped_identifier ), ";" ;

definition = function_definition
           | variable_definition
;
declaration = function_declaration
            | variable_declaration
            | opaque_declaration
            | struct_declaration
            | union_declaration
            | enum_declaration
            | typedef_declaration
;

function_definition = type, identifier, "(", [ type, [ identifier ], { ",", type, [ identifier ] } ], ")", compound_statement ;
variable_definition = type, identifier, [ "=", literal ], { ",", identifier, [ "=", literal ] }, ";" ;

function_declaration = type, identifier, "(", [ type, [ identifier ], { ",", type, [ identifier ] } ], ")", ";" ;
variable_declaration = type, identifier, { ",", identifier }, ";" ;
opaque_declaration = "opaque", identifier, ";" ;
struct_declaration = "struct", identifier, "{", variable_declaration, { variable_declaration }, "}", ";" ;
union_declaration = "union", identifier, "{", variable_declaration, { variable_declaration }, "}", ";" ;
enum_declaration = "enum", identifier, "{", identifier, [ "=", extended_int_literal ], { ",", identifier, [ "=", extended_int_literal ] }, [ "," ], "}", ";", ;
typedef_declaration = "typedef", type, identifier, ";" ;

statement = compound_statement
          | if_statement
          | while_statement
          | do_while_statement
          | for_statement
          | switch_statement
          | break_statement
          | continue_statement
          | return_statement
          | asm_statement
          | variable_definition_statement
          | expression_statement
          | opaque_declaration
          | struct_declaration
          | union_declaration
          | enum_declaration
          | typedef_declaration
          | ";"
;

compound_statement = "{", { statement }, "}" ;
if_statement = "if", "(", expression, ")", statement, [ "else", statement ] ;
while_statement = "while", "(", expression, ")", statement ;
do_while_statement = "do", statement, "while", "(", expression, ")" ;
for_statement = "for", "(", ( variable_definition_statement | expression_statement | ";" ), expression, ";", [ expression ], ")", statement ;
switch_statement = "switch", "(", expression, ")", "{", switch_statement_case | switch_statement_default, { switch_statement_case | switch_statement_default }, "}" ;
break_statement = "break", ";" ;
continue_statement = "continue", ";" ;
return_statement = "return", [ expression ], ";" ;
asm_statement = "asm", string_literal, ";" ;
variable_definition_statement = type, identifier, [ "=", assignment_expression ], { ",", identifier, [ "=", assignment_expression ] }, ";" ;
expression_statement = expression, ";" ;

switch_statement_case = "case", extended_int_literal, ":", { "case", extended_int_literal, ":" }, statement ;
switch_statement_default = "default", ":", statement ;

expression = assignment_expression
           | assignment_expression, ",", expression
;
assignment_expression = ternary_expression
                      | ternary_expression, "=", assignment_expression
                      | ternary_expression, "*=", assignment_expression
                      | ternary_expression, "/=", assignment_expression
                      | ternary_expression, "%=", assignment_expression
                      | ternary_expression, "+=", assignment_expression
                      | ternary_expression, "-=", assignment_expression
                      | ternary_expression, "<<=", assignment_expression
                      | ternary_expression, ">>=", assignment_expression
                      | ternary_expression, ">>>=", assignment_expression
                      | ternary_expression, "&=", assignment_expression
                      | ternary_expression, "^=", assignment_expression
                      | ternary_expression, "|=", assignment_expression
                      | ternary_expression, "&&=", assignment_expression
                      | ternary_expression, "||=", assignment_expression
;
ternary_expression = logical_expression
                   | logical_expression, "?", expression, ":", ternary_expression
;
logical_expression = bitwise_expression, { ( "&&" | "||" ), bitwise_expression } ;
bitwise_expression = equality_expression, { ( "&" | "|" | "^" ), equality_expression } ;
equality_expression = comparison_expression, { ( "==" | "!=" ), comparison_expression } ;
comparison_expression = spaceship_expression, { ( "<" | ">" | "<=" | ">=" ), spaceship_expression } ;
spaceship_expression = shift_expression, { "<=>", shift_expression } ;
shift_expression = addition_expression, { ( "<<" | ">>" | ">>>" ), addition_expression } ;
addition_expression = multiplication_expression, { ( "+" | "-" ), multiplication_expression } ;
multiplication_expression = prefix_expression, { ( "*" | "/" | "%" ), prefix_expression } ;
prefix_expression = postfix_expression
                  | "*", prefix_expression
                  | "&", prefix_expression
                  | "++", prefix_expression
                  | "--", prefix_expression
                  | "-", prefix_expression
                  | "!", prefix_expression
                  | "~", prefix_expression
;
postfix_expression = primary_expression, { ( ( "." | "->" ), identifier | "(", argument_list, ")" | "[", expression, "]" | "++" | "--" | "=-" | "=!" | "=~" ) } ;
primary_expression = scoped_identifier
                   | identifier
                   | literal
                   | "cast", "<", type, ">", "(", expression, ")"
                   | "sizeof", "(", ( expression | type ), ")"
                   | "(", expression, ")"
;
argument_list = [ assignment_expression, { ",", assignment_expression } ] ;
extended_int_literal = int_literal
                     | char_literal
                     | wchar_literal
                     | scoped_identifier
;
literal = extended_int_literal
        | float_literal
        | double_literal
        | string_literal
        | wstring_literal
        | "true"
        | "false"
        | "null"
        | aggregate_initializer
;
aggregate_initializer = "[", [ literal, { ",", literal }, [ "," ] ], "]" ;

type = base_type, { "const" | "volatile" | "[", extended_int_literal, "]" | "*" | "(", [ type, [ identifier ], { ",", type, [ identifier ] } ], ")" } ;
base_type = "void"
          | "ubyte"
          | "byte"
          | "char"
          | "ushort"
          | "short"
          | "uint"
          | "int"
          | "wchar"
          | "ulong"
          | "long"
          | "float"
          | "double"
          | "bool"
          | identifier
          | scoped_identifier
;

scoped_identifier = identifier, "::", identifier, { "::", identifier } ;
